@page "/"

@using Core.DTOs
@using Core.Interfaces
@inject IWorkBookService _service
@using Blazored.Toast
@using Blazored.Toast.Services
@inject IToastService toastService
@using EanBarCode13.Services
@inject IDialogCustomService _dialogService;
@inject IExcelService _excelService;
@using EanBarCode13.Pages.Home.HomeComponents;

<div class="containermainindex">

    <h3>WorkBook List</h3>

    @if (loading)
    {
        <div class="d-flex justify-content-center">
            <div class="spinner-border" role="status">
                <span class="sr-only">Loading...</span>
            </div>
        </div>
    }

    @if (workbookResponse != default)
    {
        @foreach (var i in workbookResponse.WorkBooks)
        {
            var reference = $"collapse{@i.Id}con";
            var referenceHeading = $"heading{@i.Id}"; ;
            var sharp = $"#{reference}";
            Console.WriteLine(reference);

            <div class="accordion" id="accordionEanBarCode">
                <div class="accordion-item">
                    <h2 class="accordion-header" id="@referenceHeading">
                        <button class="accordion-button" type="button" data-bs-toggle="collapse" data-bs-target="@sharp" aria-expanded="false" aria-controls="@reference">
                            <span class="btn btn-outline-danger buttontrash"
                          type="button"
                          @onclick="async ()=> await DeleteWorkBookAsync(i.Id, i.Name)">
                                Del
                            </span> @i.Name - @i.Date.ToShortDateString()
                        </button>
                    </h2>
                    <div id="@reference" class="accordion-collapse collapse" aria-labelledby="@referenceHeading" data-bs-parent="#accordionEanBarCode">
                        <div class="accordion-body">
                            @foreach (var sheet in i.Sheets)
                            {
                                <ListSheets Sheet="@sheet"/>
                            }
                        </div>
                    </div>
                </div>
            </div>
        }
    }
    <div class="actionsbuttons">
        <button type="button" @onclick="OpenFileWorkBook" class="btn btn-primary" disabled="@loading">
            Add WorkBook
        </button>
    </div>
</div>

@code {
    private WorkBookGetAllResponse workbookResponse;
    private bool loading = false;
    protected override async Task OnInitializedAsync()
    {
        await LoadDataWorkBooksAsync();
    }

    private async Task DeleteWorkBookAsync(string workBookId, string name)
    {

        bool answer = await _dialogService.DisplayConfirm("Question?", "Would you like to play a game", "Yes", "No");
        if (answer)
            await _service.DeleteWorkBookAsync(new() { Id = workBookId });
        workbookResponse = await _service.GetAllWorkBookAsync(new WorkBookGetAllRequest());
    }

    private async Task LoadDataWorkBooksAsync()
    {
        loading = true;
        workbookResponse = await _service.GetAllWorkBookAsync(new WorkBookGetAllRequest());
        loading = false;
    }

    private async Task OpenFileWorkBook()
    {
        loading = true;
        var isChargedFile = await _excelService.CreateWorkBookAsync();
        loading = isChargedFile;
        await LoadDataWorkBooksAsync();
    }
}
